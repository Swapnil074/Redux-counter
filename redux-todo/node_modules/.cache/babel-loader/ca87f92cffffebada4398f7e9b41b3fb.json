{"ast":null,"code":"export const StatusFilters = {\n  All: 'all',\n  Active: 'active',\n  Completed: 'completed'\n};\nconst initialState = {\n  status: StatusFilters.All,\n  colors: []\n};\nexport default function filtersReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case 'filters/statusFilterChanged':\n      {\n        return {\n          // Again, one less level of nesting to copy\n          ...state,\n          status: action.payload\n        };\n      }\n    case 'filters/colorFilterChanged':\n      {\n        let {\n          color,\n          changeType\n        } = action.payload;\n        const {\n          colors\n        } = state;\n        switch (changeType) {\n          case 'added':\n            {\n              if (colors.includes(color)) {\n                // This color already is set as a filter. Don't change the state.\n                return state;\n              }\n              return {\n                ...state,\n                colors: state.colors.concat(color)\n              };\n            }\n          case 'removed':\n            {\n              return {\n                ...state,\n                colors: state.colors.filter(existingColor => existingColor !== color)\n              };\n            }\n          default:\n            return state;\n        }\n      }\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["StatusFilters","All","Active","Completed","initialState","status","colors","filtersReducer","state","action","type","payload","color","changeType","includes","concat","filter","existingColor"],"sources":["/Users/swapnilsinha/Desktop/Redux-counter/redux-todo/src/features/filters/filtersSlice.js"],"sourcesContent":["export const StatusFilters = {\n  All: 'all',\n  Active: 'active',\n  Completed: 'completed',\n}\n\nconst initialState = {\n  status: StatusFilters.All,\n  colors: [],\n}\n\nexport default function filtersReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'filters/statusFilterChanged': {\n      return {\n        // Again, one less level of nesting to copy\n        ...state,\n        status: action.payload,\n      }\n    }\n    case 'filters/colorFilterChanged': {\n      let { color, changeType } = action.payload\n      const { colors } = state\n\n      switch (changeType) {\n        case 'added': {\n          if (colors.includes(color)) {\n            // This color already is set as a filter. Don't change the state.\n            return state\n          }\n\n          return {\n            ...state,\n            colors: state.colors.concat(color),\n          }\n        }\n        case 'removed': {\n          return {\n            ...state,\n            colors: state.colors.filter(\n              (existingColor) => existingColor !== color\n            ),\n          }\n        }\n        default:\n          return state\n      }\n    }\n    default:\n      return state\n  }\n}\n"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAG;EAC3BC,GAAG,EAAE,KAAK;EACVC,MAAM,EAAE,QAAQ;EAChBC,SAAS,EAAE;AACb,CAAC;AAED,MAAMC,YAAY,GAAG;EACnBC,MAAM,EAAEL,aAAa,CAACC,GAAG;EACzBK,MAAM,EAAE;AACV,CAAC;AAED,eAAe,SAASC,cAAc,GAA+B;EAAA,IAA9BC,KAAK,uEAAGJ,YAAY;EAAA,IAAEK,MAAM;EACjE,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,6BAA6B;MAAE;QAClC,OAAO;UACL;UACA,GAAGF,KAAK;UACRH,MAAM,EAAEI,MAAM,CAACE;QACjB,CAAC;MACH;IACA,KAAK,4BAA4B;MAAE;QACjC,IAAI;UAAEC,KAAK;UAAEC;QAAW,CAAC,GAAGJ,MAAM,CAACE,OAAO;QAC1C,MAAM;UAAEL;QAAO,CAAC,GAAGE,KAAK;QAExB,QAAQK,UAAU;UAChB,KAAK,OAAO;YAAE;cACZ,IAAIP,MAAM,CAACQ,QAAQ,CAACF,KAAK,CAAC,EAAE;gBAC1B;gBACA,OAAOJ,KAAK;cACd;cAEA,OAAO;gBACL,GAAGA,KAAK;gBACRF,MAAM,EAAEE,KAAK,CAACF,MAAM,CAACS,MAAM,CAACH,KAAK;cACnC,CAAC;YACH;UACA,KAAK,SAAS;YAAE;cACd,OAAO;gBACL,GAAGJ,KAAK;gBACRF,MAAM,EAAEE,KAAK,CAACF,MAAM,CAACU,MAAM,CACxBC,aAAa,IAAKA,aAAa,KAAKL,KAAK;cAE9C,CAAC;YACH;UACA;YACE,OAAOJ,KAAK;QAAA;MAElB;IACA;MACE,OAAOA,KAAK;EAAA;AAElB"},"metadata":{},"sourceType":"module"}