{"ast":null,"code":"export const statusFilters = {\n  All: 'all',\n  Active: 'active',\n  Completed: 'completed'\n};\nconst initialState = {\n  status: statusFilters.All,\n  priorities: []\n};\nexport default function filtersReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case 'filters/statusFilterChanged':\n      return {\n        ...state,\n        status: action.payload\n      };\n    case 'filters/priorityFilterChanged':\n      let {\n        priority,\n        changeType\n      } = action.payload;\n      const {\n        priorities\n      } = state;\n      switch (changeType) {\n        case 'added':\n          {\n            if (priorities.includes(priority)) {\n              // This priority already is set as a filter. Don't change the state.\n              return state;\n            }\n            return {\n              ...state,\n              priorities: state.priorities.concat(priority)\n            };\n          }\n        case 'removed':\n          {\n            return {\n              ...state,\n              priorities: state.priorities.filter(existingPriorities => existingPriorities !== priority)\n            };\n          }\n      }\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["statusFilters","All","Active","Completed","initialState","status","priorities","filtersReducer","state","action","type","payload","priority","changeType","includes","concat","filter","existingPriorities"],"sources":["/Users/swapnilsinha/Desktop/Redux-counter/redux-todo/src/features/filters/filtersSlice.js"],"sourcesContent":["export const statusFilters = {\n  All: 'all',\n  Active: 'active',\n  Completed: 'completed',\n}\n\nconst initialState={\n    status:statusFilters.All,\n    priorities:[]\n}\n\nexport default function filtersReducer(state=initialState,action){\n    switch(action.type){\n        case 'filters/statusFilterChanged':\n            return{\n                ...state,\n                status:action.payload\n            }\n        case 'filters/priorityFilterChanged':\n            let { priority, changeType } = action.payload\n            const { priorities } = state\n      \n            switch (changeType) {\n              case 'added': {\n                if (priorities.includes(priority)) {\n                  // This priority already is set as a filter. Don't change the state.\n                  return state\n                }\n      \n                return {\n                  ...state,\n                  priorities: state.priorities.concat(priority),\n                }\n              }\n              case 'removed': {\n                return {\n                  ...state,\n                  priorities: state.priorities.filter(\n                    (existingPriorities) => existingPriorities !== priority\n                  ),\n                }\n              }\n            }\n              default:\n                return state\n    }\n}"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAG;EAC3BC,GAAG,EAAE,KAAK;EACVC,MAAM,EAAE,QAAQ;EAChBC,SAAS,EAAE;AACb,CAAC;AAED,MAAMC,YAAY,GAAC;EACfC,MAAM,EAACL,aAAa,CAACC,GAAG;EACxBK,UAAU,EAAC;AACf,CAAC;AAED,eAAe,SAASC,cAAc,GAA2B;EAAA,IAA1BC,KAAK,uEAACJ,YAAY;EAAA,IAACK,MAAM;EAC5D,QAAOA,MAAM,CAACC,IAAI;IACd,KAAK,6BAA6B;MAC9B,OAAM;QACF,GAAGF,KAAK;QACRH,MAAM,EAACI,MAAM,CAACE;MAClB,CAAC;IACL,KAAK,+BAA+B;MAChC,IAAI;QAAEC,QAAQ;QAAEC;MAAW,CAAC,GAAGJ,MAAM,CAACE,OAAO;MAC7C,MAAM;QAAEL;MAAW,CAAC,GAAGE,KAAK;MAE5B,QAAQK,UAAU;QAChB,KAAK,OAAO;UAAE;YACZ,IAAIP,UAAU,CAACQ,QAAQ,CAACF,QAAQ,CAAC,EAAE;cACjC;cACA,OAAOJ,KAAK;YACd;YAEA,OAAO;cACL,GAAGA,KAAK;cACRF,UAAU,EAAEE,KAAK,CAACF,UAAU,CAACS,MAAM,CAACH,QAAQ;YAC9C,CAAC;UACH;QACA,KAAK,SAAS;UAAE;YACd,OAAO;cACL,GAAGJ,KAAK;cACRF,UAAU,EAAEE,KAAK,CAACF,UAAU,CAACU,MAAM,CAChCC,kBAAkB,IAAKA,kBAAkB,KAAKL,QAAQ;YAE3D,CAAC;UACH;MAAC;IAED;MACE,OAAOJ,KAAK;EAAA;AAE5B"},"metadata":{},"sourceType":"module"}